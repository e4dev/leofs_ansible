##======================================================================
## LeoFS - Storage Configuration
##
## See: http://leo-project.net/leofs/docs/configuration/configuration_2.html
##======================================================================
## --------------------------------------------------------------------
## SASL
## --------------------------------------------------------------------
## See: http://www.erlang.org/doc/man/sasl_app.html
##
## The following configuration parameters are defined for
## the SASL application. See app(4) for more information
## about configuration parameters

## SASL error log path
## sasl.sasl_error_log = ./log/sasl/sasl-error.log
sasl.sasl_error_log = {{ leofs_sasl_error_log }}

## Restricts the error logging performed by the specified sasl_error_logger
## to error reports, progress reports, or both.
## errlog_type = [error | progress | all]
## sasl.errlog_type = error
sasl.errlog_type = {{ leofs_sasl_errorlog_type }}

## Specifies in which directory the files are stored.
## If this parameter is undefined or false, the error_logger_mf_h is not installed.
## sasl.error_logger_mf_dir = ./log/sasl
sasl.error_logger_mf_dir = {{ leofs_sasl_error_mf_dir }}

## Specifies how large each individual file can be.
## If this parameter is undefined, the error_logger_mf_h is not installed.
## sasl.error_logger_mf_maxbytes = 10485760
sasl.error_logger_mf_maxbytes = {{ leofs_sasl_error_logger_mf_maxbytes }}

## Specifies how many files are used.
## If this parameter is undefined, the error_logger_mf_h is not installed.
## sasl.error_logger_mf_maxfiles = 5
sasl.error_logger_mf_maxfiles = {{ leofs_sasl_error_logger_mf_maxfiles }}

## --------------------------------------------------------------------
## Manager's Node(s)
## --------------------------------------------------------------------
## Name of Manager node(s)
managers = {{ leo_managers }}

## --------------------------------------------------------------------
## STORAGE
## --------------------------------------------------------------------
## Object container

## e.g. Case of plural pathes
## obj_containers.path = [/var/leofs/avs/1, /var/leofs/avs/2]
## obj_containers.num_of_containers = [32, 64]
obj_containers.path = [{{ leo_storage_container_paths|join(",") }}] 
obj_containers.num_of_containers = [{{ leo_storage_num_of_containers|join(",") }}]

## Metadata Storage: [bitcask, leveldb] - default:leveldb
## obj_containers.metadata_storage = leveldb
obj_containers.metadata_storage = {{ leo_storage_metadata_storage }}

## A number of virtual-nodes for the redundant-manager
## num_of_vnodes = 168
num_of_vnodes = {{ num_vnodes }}

## Enable strict check between checksum of a metadata and checksum of an object
## - default:false
## object_storage.is_strict_check = false
object_storage.is_strict_check = {{ leo_storage_strict_check|lower }}

## Threshold of slow processing (msec) - default:1000(msec)
## object_storage.threshold_of_slow_processing = 1000
object_storage.threshold_of_slow_processing = {{ leo_storage_thres_slow }}

## Timeout of seeking metadatas per a metadata - default:10(msec)
## seeking_timeout_per_metadata = 10
seeking_timeout_per_metadata = {{ leo_storage_seek_timeout_per_meta }}

## Maximum number of processes for both write and read operation
## since v1.2.20
## max_num_of_procs = 3000
max_num_of_procs = {{ leo_storage_max_num_procs }}

## Total number of obj-storage-read processes per object-container, AVS
## Range: [1..100]
## since v1.2.20
## num_of_obj_storage_read_procs = 3
num_of_obj_storage_read_procs = {{ leo_storage_num_read_procs }}


## --------------------------------------------------------------------
## STORAGE - Watchdog
## --------------------------------------------------------------------
## When reach a number of safe (clear watchdog), a watchdog loosen the control
watchdog.common.loosen_control_at_safe_count = {{ leofs_watchdog_loosen_control_safe_count }}

##
##  Watchdog.REX(RPC)
##
## Is rex -watchdog enabled - default:false
## watchdog.rex.is_enabled = true
watchdog.rex.is_enabled = {{ leofs_watchdog_rex_enabled|lower }}

## rex - watch interval - default:5sec
## watchdog.rex.interval = 5
watchdog.rex.interval = {{ leofs_watchdog_rex_interval }}

## Threshold memory capacity of binary for rex(rpc) - default:32MB
watchdog.rex.threshold_mem_capacity = {{ leofs_watchdog_rex_thres_mem }}


##
##  Watchdog.CPU
##
## Is cpu-watchdog enabled - default:false
## watchdog.cpu.is_enabled = true
watchdog.cpu.is_enabled = {{ leofs_watchdog_cpu_enabled|lower }}

## cpu - raised error times
## watchdog.cpu.raised_error_times = 3
watchdog.cpu.raised_error_times = {{ leofs_watchdog_cpu_error_times }}

## cpu - watch interval - default:5sec
## watchdog.cpu.interval = 5
watchdog.cpu.interval = {{ leofs_watchdog_cpu_interval }}

## Threshold CPU load avg for 1min/5min - default:5.0
## watchdog.cpu.threshold_cpu_load_avg = 5.0
watchdog.cpu.threshold_cpu_load_avg = {{ leofs_watchdog_cpu_thres_load }}

## Threshold CPU load util - default:100 = "100%"
watchdog.cpu.threshold_cpu_util = {{ leofs_watchdog_cpu_thres_util }}


##
##  Watchdog.DISK
##
## Is disk-watchdog enabled - default:false
## watchdog.disk.is_enabled = false
watchdog.disk.is_enabled = {{ leofs_watchdog_disk_enabled|lower }}

## disk - raised error times
## watchdog.disk.raised_error_times = 5
watchdog.disk.raised_error_times = {{ leofs_watchdog_disk_error_times }}

## disk - watch interval - default:1sec
## watchdog.disk.interval = 1
watchdog.disk.interval = {{ leofs_watchdog_disk_interval }} 

## Threshold use(%) of a target disk's capacity - defalut:85%
## watchdog.disk.threshold_disk_use = 85
watchdog.disk.threshold_disk_use = {{ leofs_watchdog_disk_thres_use }}

## Threshold disk utilization(%) - defalut:90%
## watchdog.disk.threshold_disk_util = 90
watchdog.disk.threshold_disk_util = {{ leofs_watchdog_disk_thres_util }}

## Threshold disk read kb/sec - defalut:98304(KB) = 96MB
## watchdog.disk.threshold_disk_rkb = 98304
watchdog.disk.threshold_disk_rkb = {{ leofs_watchdog_disk_thres_rkb }}

## Threshold disk write kb/sec - defalut:98304(KB) = 96MB
## watchdog.disk.threshold_disk_wkb = 98304
watchdog.disk.threshold_disk_wkb = {{ leofs_watchdog_disk_thres_wkb }}

## disk target devices for checking disk utilization
## watchdog.disk.target_devices = []
watchdog.disk.target_devices = [{{ leofs_watchdog_disk_target_devices|join(",") }}]

##
##  Watchdog.Cluster
##
## Is cluster-watchdog enabled - default:false
## watchdog.cluster.is_enabled = false
watchdog.cluster.is_enabled = {{ leofs_watchdog_cluster_enabled|lower }}

## cluster - watch interval - default:10sec
## watchdog.cluster.interval = 10
watchdog.cluster.interval = {{ leofs_watchdog_cluster_inteval }}

##
##  Watchdog.Error
##
## Is error-watchdog enabled - default:false
## watchdog.error.is_enabled = false
watchdog.error.is_enabled = {{ leofs_watchdog_error_enabled|lower }}

## error - watch interval - default:60sec
## watchdog.error.interval = 60
watchdog.error.interval = {{ leofs_watchdog_error_interval }}

## error - threshold error count - default:100
## watchdog.error.threshold_count = 100
watchdog.error.threshold_count = {{ leofs_watchdog_error_thres_cnt }}


## --------------------------------------------------------------------
## STORAGE - Autonomic Operation
## --------------------------------------------------------------------
## [compaction] enabled compaction? - default:false
## autonomic_op.compaction.is_enabled = false
autonomic_op.compaction.is_enabled = {{ leo_storage_auto_compact_enabled|lower }}

## [compaction] number of parallel procs - default:1
## autonomic_op.compaction.parallel_procs = 1
autonomic_op.compaction.parallel_procs = {{ leo_storage_auto_compact_procs }}

## [compaction] execution interval time between data-compaction(sec) - default:3600(sec) (60min)
## autonomic_op.compaction.interval = 3600
autonomic_op.compaction.interval = {{ leo_storage_auto_compact_interval }}

## [compaction] warning ratio of active size - default:70%
## autonomic_op.compaction.warn_active_size_ratio = 70
autonomic_op.compaction.warn_active_size_ratio = {{ leo_storage_auto_compact_warn_ratio }}

## [compaction] threshold ratio of active size - default:60%
## autonomic_op.compaction.threshold_active_size_ratio = 60
autonomic_op.compaction.threshold_active_size_ratio = {{ leo_storage_auto_compact_thres_ratio }}


## --------------------------------------------------------------------
## STORAGE - Data Compcation
## --------------------------------------------------------------------
## Limit of a number of procs to execute data-compaction in parallel
compaction.limit_num_of_compaction_procs = {{ leo_storage_compact_limit_procs }}

## Regular value of compaction-proc waiting time/batch-proc(msec)
compaction.waiting_time_regular = {{ leo_storage_compact_wait_time_reg }}

## Maximum value of compaction-proc waiting time/batch-proc(msec)
compaction.waiting_time_max = {{ leo_storage_compact_wait_time_max }}

## Regular compaction batch processes
compaction.batch_procs_regular = {{ leo_storage_compact_batch_reg }}

## Maximum compaction batch processes
compaction.batch_procs_max = {{ leo_storage_compact_batch_max }}

## Perfetch size when skipping garbage
compaction.skip_prefetch_size = {{ leo_storage_compact_skip_prefetch_size }}


## --------------------------------------------------------------------
## STORAGE - MQ
## --------------------------------------------------------------------
## MQ backend storage: [leveldb | bitcask] - default:leveldb
## mq.backend_db = leveldb
mq.backend_db = {{ leo_storage_mq_backend }}

## A number of mq-server's processes
mq.num_of_mq_procs = {{ leo_storage_mq_num_procs }}

##
## [Number of bach processes of message]
##
## Maximum number of bach processes of message
mq.num_of_batch_process_max = {{ leo_storage_mq_batch_max }}

## Regular value of bach processes of message
mq.num_of_batch_process_regular = {{ leo_storage_mq_batch_reg }}

##
## [Interval beween batch-procs]
##
## Maximum value of interval between batch-procs(msec)
mq.interval_between_batch_procs_max = {{ leo_storage_mq_batch_inteval_max }}

## Regular value of interval between batch-procs(msec)
mq.interval_between_batch_procs_regular = {{ leo_storage_mq_batch_inteval_reg }}


## --------------------------------------------------------------------
## STORAGE - Backend DB
## --------------------------------------------------------------------
## eleveldb Fadvise Willneed (Improve Performance when Metadata Size is small)
backend_db.eleveldb.fadvise_willneed = {{ leo_backend_db_eleveldb_fadvise_willneed|lower }}

## eleveldb Write Buffer Size
backend_db.eleveldb.write_buf_size = {{ leo_backend_db_eleveldb_write_buf_size }}

## eleveldb Max Open Files
backend_db.eleveldb.max_open_files = {{ leo_backend_db_eleveldb_max_open_files }}

## eleveldb SST Block Size
backend_db.eleveldb.sst_block_size = {{ leo_backend_db_eleveldb_sst_block_size }}


## --------------------------------------------------------------------
## STORAGE - Replication/Recovery object(s)
## --------------------------------------------------------------------
## Rack-id for the rack-awareness replica placement
## replication.rack_awareness.rack_id =
{% if leo_storage_rep_rack_id is defined %}
replication.rack_awareness.rack_id = {{ leo_storage_rep_rack_id }}
{% endif %}

## Size of stacked objects (bytes)
## replication.recovery.size_of_stacked_objs = 33554432
replication.recovery.size_of_stacked_objs = {{ leo_storage_rep_recovery_stack_size }}

## Stacking timeout (sec)
## replication.recovery.stacking_timeout = 5
replication.recovery.stacking_timeout = {{ leo_storage_rep_recovery_stack_timeout }}


## --------------------------------------------------------------------
## STORAGE - MDC Replication
## --------------------------------------------------------------------
## Size of stacked objects (bytes) - default:32MB
## mdc_replication.size_of_stacked_objs = 33554432
mdc_replication.size_of_stacked_objs = {{ leo_storage_mdc_stack_size }}

## Stacking timeout (sec)
mdc_replication.stacking_timeout = {{ leo_storage_mdc_stack_timeout }}

## Request timeout (msec)
mdc_replication.req_timeout = {{ leo_storage_mdc_req_timeout }}

## Number of stacking procs
mdc_replication.stacking_procs = {{ leo_storage_mdc_stack_proc }}


## --------------------------------------------------------------------
## STORAGE - Log
## --------------------------------------------------------------------
##
## Log level: [0:debug, 1:info, 2:warn, 3:error]
## log.log_level = 1
log.log_level = {{ leofs_log_level }}

## Is enable access-log [true, false]
## log.is_enable_access_log = false
log.is_enable_access_log = {{ leofs_access_log | lower }}

## Output log file(s) - Erlang's log
## log.erlang = ./log/erlang
log.erlang = {{ leofs_log_erlang }}

## Output log file(s) - app
## log.app = ./log/app
log.app = {{ leofs_log_app }}

## Output log file(s) - members of storage-cluster
## log.member_dir = ./log/ring
log.member_dir = {{ leofs_log_member }}

## Output log file(s) - ring
## log.ring_dir = ./log/ring
log.ring_dir = {{ leofs_log_ring }}

## Output data-diagnosis log
log.is_enable_diagnosis_log = {{ leofs_diagnosis_log|lower }}

## --------------------------------------------------------------------
## STORAGE - Other Directories
## --------------------------------------------------------------------
## Directory of queue for monitoring "RING"
## queue_dir = ./work/queue
queue_dir = {{ leofs_queue_dir }}

## Directory of SNMP agent configuration
## snmp_agent = ./snmp/snmpa_storage_0/LEO-STORAGE
snmp_agent = {{ leofs_snmp_agent }}


## --------------------------------------------------------------------
## Other Libs
## --------------------------------------------------------------------
## Send after interval
## leo_ordning_reda.send_after_interval = 100
leo_ordning_reda.send_after_interval = {{ leo_ordning_reda_send_interval }}

## Temporary directory of stacked objects
## leo_ordning_reda.temp_stacked_dir = "work/ord_reda/"
leo_ordning_reda.temp_stacked_dir = {{ leofs_stack_dir }}


## --------------------------------------------------------------------
## RPC
## --------------------------------------------------------------------
## RPC-Server's acceptors
## this value must be determinted by following logic
## rpc.server.acceptor need to be larger than
## rpc.client.connection_pool(buffer)_size * "# of storage nodes + # of manager nodes in your cluster"
## The default value is suitable for less than 16 nodes in a cluster
rpc.server.acceptors = {{ leofs_rpc_server_acceptors }}

## RPC-Server's listening port number
rpc.server.listen_port = {{ leofs_rpc_server_port }}

## RPC-Server's listening timeout
rpc.server.listen_timeout = {{ leofs_rpc_server_timeout }}

## RPC-Client's size of connection pool
rpc.client.connection_pool_size = {{ leofs_rpc_server_conn_pool }}

## RPC-Client's size of connection buffer
rpc.client.connection_buffer_size = {{ leofs_rpc_server_conn_buffer_size }}

## RPC-Client's max number of requests for reconnection to a remote-node
## * 1..<integer>: specialized value
## rpc.client.max_requests_for_reconnection = 64
rpc.client.max_requests_for_reconnection = {{ leofs_rpc_server_max_req_reconn }}


## --------------------------------------------------------------------
## MANAGER - Mnesia
##     * Store the info storage-cluster and the info of gateway(s)
##     * Store the RING and the command histories
## --------------------------------------------------------------------
## The write threshold for transaction log dumps
## as the number of writes to the transaction log
mnesia.dump_log_write_threshold = {{ leofs_mnesia_dump_log_write_thres }}

## Controls how often disc_copies tables are dumped from memory
mnesia.dc_dump_limit = {{ leofs_mnesia_dc_dump_limit }}

## --------------------------------------------------------------------
## Profiling
## --------------------------------------------------------------------
## Enable profiler - leo_backend_db
## leo_backend_db.profile = false
leo_backend_db.profile = {{ leo_profiler_backend_db|lower }}

## Enable profiler - leo_logger
## leo_logger.profile = false
leo_logger.profile = {{ leo_profiler_logger|lower }}

## Enable profiler - leo_mq
## leo_mq.profile = false
leo_mq.profile = {{ leo_profiler_mq|lower }}

## Enable profiler - leo_object_storage
## leo_object_storage.profile = false
leo_object_storage.profile = {{ leo_profiler_obj_storage|lower }}

## Enable profiler - leo_ordning_reda
## leo_ordning_reda.profile = false
leo_ordning_reda.profile = {{ leo_profiler_ordning_reda|lower }}

## Enable profiler - leo_redundant_manager
## leo_redundant_manager.profile = false
leo_redundant_manager.profile = {{ leo_profiler_redudant|lower }}

## Enable profiler - leo_rpc
## leo_rpc.profile = false
leo_rpc.profile = {{ leo_profiler_rpc|lower }}

## Enable profiler - leo_statistics
## leo_statistics.profile = false
leo_statistics.profile = {{ leo_profiler_stat|lower }}


##======================================================================
## For vm.args
##======================================================================
## Name of the leofs-storage node
nodename = {{ leofs_module_nodename }}

## Cookie for distributed node communication.  All nodes in the same cluster
## should use the same cookie or they will not be able to communicate.
distributed_cookie = {{ leofs_cookie }}

## Enable kernel poll
erlang.kernel_poll = {{ erlang_kernel_pool|lower }}

## Number of async threads
erlang.asyc_threads = {{ erlang_async_threads }}

## Increase number of concurrent ports/sockets
erlang.max_ports = {{ erlang_max_ports }}

## Set the location of crash dumps
erlang.crash_dump = {{ erlang_crash_dump }}

## Raise the ETS table limit
erlang.max_ets_tables = {{ erlang_max_ets_tables }}

## Enable SMP
erlang.smp = {{ erlang_smp|lower }}

## Erlang scheduler's compaction of load
erlang.schedulers.compaction_of_load = {{ erlang_sched_compact_load|lower }}

## Erlang scheduler's balancing of load
erlang.schedulers.utilization_balancing = {{ erlang_sched_utli_balance|lower }}

## Sender-side network distribution buffer size
## - default 32MB (32768KB)
erlang.distribution_buffer_size = {{ erlang_dist_buffer_size }}

## A non-negative integer which indicates
## how many times generational garbage collections
## can be done without forcing a fullsweep collection
erlang.fullsweep_after = {{ erlang_fullsweep_after }}

## Enable/Disable eager check I/O (Erlang 17.4/erts-6.3-, ref:OTP-12117)
erlang.secio = {{ erlang_secio|lower }}

## Raise the default erlang process limit
process_limit = {{ erlang_process_limit }}

## Path of SNMP-agent configuration
## snmp_conf = ./snmp/snmpa_storage_0/leo_storage_snmp
snmp_conf = {{ leofs_snmp_conf }}
